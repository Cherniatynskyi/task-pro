{"version":3,"file":"static/js/207.b620eca6.chunk.js","mappings":"gIACA,QAA8B,iCCA9B,EAA+B,sCAA/B,EAAqF,uC,aCDrF,MAQA,EARgBA,KAEZC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,KAAAC,SAAG,aCUT,EAVwBC,IAAoB,IAAnB,UAAEC,GAAWD,EACpC,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBL,SAAA,EAE/BD,EAAAA,EAAAA,KAAA,MAAIK,UAAWC,EAAkBL,SAAC,oBAClCD,EAAAA,EAAAA,KAACD,EAAO,MACJ,ECRV,EAA6B,kCAA7B,EAA8E,oCAA9E,EAAkI,qCAAlI,EAA6O,sC,sBCG7O,MA+CA,EA/CuBG,IAAuC,IAAtC,OAAEK,EAAM,QAAEC,EAAO,YAAEC,GAAaP,EACtD,MAIMQ,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaG,SAAS,uBAS/B,OACEd,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CACLC,cAhBkB,CACpBH,MAAO,IAgBLH,iBAAkBA,EAClBO,SAViBC,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EACzCX,EAAYU,EAAON,OACnBQ,IACAb,GAAS,EAOgBP,UAEvBG,EAAAA,EAAAA,MAACkB,EAAAA,GAAI,CAAArB,SAAA,EACHG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAOuB,QAAQ,QAAOtB,SAAC,YACvBD,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,KAAK,OACLC,GAAG,QACHC,KAAK,QACLC,YAAY,QACZC,aAAa,MACbC,WAAS,KAEX9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,CAACJ,KAAK,QAAQK,UAAU,MAAM3B,UAAU,cAEvDL,EAAAA,EAAAA,KAAA,UAAQyB,KAAK,SAAQxB,UACnBD,EAAAA,EAAAA,KAAA,OAAAC,UAIED,EAAAA,EAAAA,KAAA,KAAAC,SAAG,+BAIF,EC1Bb,EAhBsBgC,KAElB7B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAeL,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,UAAQK,UAAWC,EAAiBL,UAClCD,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAkBL,UAIhCD,EAAAA,EAAAA,KAAA,KAAGK,UAAWC,EAAmBL,SAAC,4BAGtCD,EAAAA,EAAAA,KAACkC,EAAc,OCArB,EAXoBC,KAEhBnC,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAgBL,UAC9BG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACED,EAAAA,EAAAA,KAACoC,EAAe,KAChBpC,EAAAA,EAAAA,KAACiC,EAAa,Q","sources":["webpack://task-pro/./src/components/ScreensPage/ScreensPage.module.css?d472","webpack://task-pro/./src/components/dashboard/HeaderDashboard/HeaderDashboard.module.css?4f8c","components/dashboard/Filters/Filters.jsx","components/dashboard/HeaderDashboard/HeaderDashboard.jsx","webpack://task-pro/./src/components/dashboard/MainDashboard/MainDashboard.module.css?9d01","components/dashboard/AddColumnModal/AddColumnModal.jsx","components/dashboard/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"screensWrap\":\"ScreensPage_screensWrap__KpiXB\"};","// extracted by mini-css-extract-plugin\nexport default {\"headDashWrap\":\"HeaderDashboard_headDashWrap__-gjPa\",\"dashboardName\":\"HeaderDashboard_dashboardName__GHex9\"};","const Filters = () => {\n  return (\n    <div>\n      <p>Filter</p>\n    </div>\n  );\n};\n\nexport default Filters;\n","import css from '../HeaderDashboard/HeaderDashboard.module.css';\nimport Filters from '../Filters/Filters';\n\nconst HeaderDashboard = ({ boardName }) => {\n  return (\n    <div className={css.headDashWrap}>\n      {/* <h2 className={css.dashboardName}>{boardName}</h2> */}\n      <h2 className={css.dashboardName}>Project office</h2>\n      <Filters />\n    </div>\n  );\n};\n\nexport default HeaderDashboard;\n","// extracted by mini-css-extract-plugin\nexport default {\"columnWrap\":\"MainDashboard_columnWrap__SulKw\",\"addColumnBtn\":\"MainDashboard_addColumnBtn__6+fG2\",\"addColumnWrap\":\"MainDashboard_addColumnWrap__j-UdJ\",\"addColumnIcon\":\"MainDashboard_addColumnIcon__qVRIe\",\"addColumnTitle\":\"MainDashboard_addColumnTitle__VFj8z\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n// import sprite from '../../images/sprite.svg';\n\nconst AddColumnModal = ({ isOpen, onClose, onAddColumn }) => {\n  const initialValues = {\n    title: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required'),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    onAddColumn(values.title);\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <div>\n          <label htmlFor=\"title\">Title:</label>\n          <Field\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoComplete=\"off\"\n            autoFocus\n          />\n          <ErrorMessage name=\"title\" component=\"div\" className=\"error\" />\n        </div>\n        <button type=\"submit\">\n          <div>\n            {/* <svg>\n              <use href={`${sprite}#icon-plus`}></use>\n            </svg> */}\n            <p>Add another column</p>\n          </div>\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default AddColumnModal;\n","import css from './MainDashboard.module.css';\n// import sprite from '../../images/sprite.svg';\n\nimport AddColumnModal from '../AddColumnModal/AddColumnModal';\n\nconst MainDashboard = () => {\n  return (\n    <div className={css.columnWrap}>\n      <button className={css.addColumnBtn}>\n        <div className={css.addColumnWrap}>\n          {/* <svg className={css.addColumnIcon}>\n            <use href={`${sprite}#icon-plus`}></use>\n          </svg> */}\n          <p className={css.addColumnTitle}>Add another column</p>\n        </div>\n      </button>\n      <AddColumnModal />\n    </div>\n  );\n};\n\nexport default MainDashboard;\n","import css from './ScreensPage.module.css';\n\nimport HeaderDashboard from '../dashboard/HeaderDashboard/HeaderDashboard';\nimport MainDashboard from '../dashboard/MainDashboard/MainDashboard';\n\nconst ScreensPage = () => {\n  return (\n    <div className={css.screensWrap}>\n      <div>\n        <HeaderDashboard />\n        <MainDashboard />\n      </div>\n    </div>\n  );\n};\n\nexport default ScreensPage;\n\n// import css from './ScreensPage.module.css';\n\n// import { useLocation, useNavigate, useParams } from 'react-router-dom';\n// import { useEffect, useRef, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n\n// import HeaderDashboard from '../HeaderDashboard/HeaderDashboard';\n// import MainDashboard from '../MainDashboard/MainDashboard';\n\n// import { selectAllDashboards } from '../../redux/dashboard/dashboardsSelectors';\n\n// const ScreensPage = () => {\n//   const [loading, setLoading] = useState(false);\n//   const [currentPageName, setCurrentPageName] = useState('');\n//   const didMount = useRef(true);\n//   const { boardName } = useParams();\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const allDashboards = useSelector(selectAllDashboards);\n//   const dispatch = useDispatch();\n//   const [boards, setBoards] = useState(allDashboards);\n\n//   const lookBoard = () => {\n//     const all = allDashboards.filter(dashboard => {\n//       return dashboard.title === boardName;\n//     });\n\n//     return all;\n//   };\n\n//   useEffect(() => {\n//     setCurrentPageName(boardName);\n//   }, [location.pathname, boardName]);\n\n//   useEffect(() => {\n//     setBoards(allDashboards);\n//     if (didMount.current !== true && boardName !== currentPageName) {\n//       return;\n//     }\n//     if (allDashboards.length === 0) {\n//       navigate(`/home`, {\n//         replace: true,\n//       });\n//     }\n//     if (allDashboards.length > 0 && !boardName) {\n//       setLoading(true);\n//       const lastDashboard = allDashboards[allDashboards.length - 1] ?? '';\n//       setCurrentPageName(lastDashboard.title);\n//       navigate(`/home/${lastDashboard.title}`, {\n//         replace: true,\n//         state: { id: lastDashboard._id },\n//       });\n//       setLoading(false);\n//     }\n//     didMount.current = false;\n//   }, [\n//     allDashboards,\n//     navigate,\n//     boardName,\n//     currentPageName,\n//     boards.length,\n//     dispatch,\n//   ]);\n\n//   return (\n//     <div\n//       className={css.test}\n//       $bcgurl={\n//         lookBoard().length > 0 ? lookBoard()[0].backgroundURL : undefined\n//       }\n//     >\n//       {loading ? (\n//         <div>Loading....</div>\n//       ) : (\n//         boardName !== undefined && (\n//           <div>\n//             <HeaderDashboard boardName={boardName} />\n//             <MainDashboard />\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ScreensPage;\n"],"names":["Filters","_jsx","children","_ref","boardName","_jsxs","className","css","isOpen","onClose","onAddColumn","validationSchema","Yup","shape","title","required","Formik","initialValues","onSubmit","handleSubmit","values","_ref2","resetForm","Form","htmlFor","Field","type","id","name","placeholder","autoComplete","autoFocus","ErrorMessage","component","MainDashboard","AddColumnModal","ScreensPage","HeaderDashboard"],"sourceRoot":""}