{"version":3,"file":"static/js/260.31d7ea66.chunk.js","mappings":"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","sources":["webpack://task-pro/./src/components/Auth/Auth.module.css?93a7","components/Auth/Register.jsx","components/Auth/Login.jsx","components/Auth/AuthNav.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authPageWrapper\":\"Auth_authPageWrapper__QiGyE\",\"authForm\":\"Auth_authForm__-Et2v\",\"registerForm\":\"Auth_registerForm__FTXoS\",\"loginForm\":\"Auth_loginForm__LVUAX\",\"authNav\":\"Auth_authNav__kGdXJ\",\"authLink1\":\"Auth_authLink1__G6iFP\",\"authLink2\":\"Auth_authLink2__ZGHwE\",\"fieldWrapper\":\"Auth_fieldWrapper__B6Zfo\",\"field\":\"Auth_field__w1nrX\",\"button\":\"Auth_button__oOib1\",\"iconBtn\":\"Auth_iconBtn__QA+XP\",\"errorMessage\":\"Auth_errorMessage__-2mWy\"};","import React from 'react';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport css from './Auth.module.css';\n// import { useDispatch } from 'react-redux';\n// import { register } from 'redux/auth/operations';\nimport sprite from '../../images/sprite.svg';\n\nconst nameRegExp =\n  /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{2,32}$/;\n\nconst emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconst passwordRegExp =\n  /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,64}$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(nameRegExp, 'Enter a valid name*')\n    .required('Name is required*'),\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .required('Password is required*')\n    .matches(passwordRegExp, 'Password must meet the requirements*'),\n});\n\nexport const Register = () => {\n  // const dispatch = useDispatch();\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n  //   dispatch(\n  //     register({\n  //       name: form.elements.name.value,\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   form.reset();\n  // };\n\n  return (\n    <div className={css.registerForm}>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n        // onSubmit={handleSubmit}\n      >\n        <Form>\n          <div className={css.fieldWrapper}>\n            <Field\n              className={css.field}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter your name\"\n            />\n          </div>\n          <ErrorMessage name=\"name\">\n            {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n          </ErrorMessage>\n          <div className={css.fieldWrapper}>\n            <Field\n              className={css.field}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          <ErrorMessage name=\"email\">\n            {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n          </ErrorMessage>\n          <div className={css.fieldWrapper}>\n            <Field\n              className={css.field}\n              type={passwordVisible ? 'text' : 'password'}\n              name=\"password\"\n              placeholder=\"Create a password\"\n            />\n            {passwordVisible ? (\n              <button\n                className={css.iconBtn}\n                type=\"button\"\n                onClick={handleClickPasswordVisibility}\n              >\n                <svg>\n                  <use href={`${sprite}#icon-eye`} />\n                </svg>\n              </button>\n            ) : (\n              <button\n                className={css.iconBtn}\n                type=\"button\"\n                onClick={handleClickPasswordVisibility}\n              >\n                <svg>\n                  <use href={`${sprite}#icon-eye`} />\n                </svg>\n              </button>\n            )}\n          </div>\n          <ErrorMessage name=\"password\">\n            {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n          </ErrorMessage>\n          <button className={css.button} type=\"submit\">\n            Register Now\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\n// * Підправити стилі на виведення помилки\n// * звірити валідації\n// * підключити зміну теми\n","import React from 'react';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport css from './Auth.module.css';\nimport sprite from '../../images/sprite.svg';\n\n// import { useDispatch } from 'react-redux';\n// import { logIn } from 'redux/auth/operations';\n\nconst emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconst passwordRegExp =\n  /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,64}$/;\n\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .required('Password is required*')\n    .matches(passwordRegExp, 'Password must meet the requirements*'),\n});\n\nexport const Login = () => {\n  // const dispatch = useDispatch();\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  //   const handleSubmit = e => {\n  //     e.preventDefault();\n  //     const form = e.currentTarget;\n  //     dispatch(\n  //       logIn({\n  //         email: form.elements.email.value,\n  //         password: form.elements.password.value,\n  //       })\n  //     );\n  //     form.reset();\n  return (\n    <div className={css.loginForm}>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n      >\n        {/* <Form onSubmit={handleSubmit} autoComplete=\"off\">*/}\n        <Form autoComplete=\"off\">\n          <div className={css.fieldWrapper}>\n            <Field\n              className={css.field}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          <ErrorMessage name=\"email\">\n            {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n          </ErrorMessage>\n          <div className={css.fieldWrapper}>\n            <Field\n              className={css.field}\n              type={passwordVisible ? 'text' : 'password'}\n              name=\"password\"\n              placeholder=\"Confirm a password\"\n            />\n            {passwordVisible ? (\n              <button\n                className={css.iconBtn}\n                type=\"button\"\n                onClick={handleClickPasswordVisibility}\n              >\n                <svg>\n                  <use href={`${sprite}#icon-eye`} />\n                </svg>\n              </button>\n            ) : (\n              <button\n                className={css.iconBtn}\n                type=\"button\"\n                onClick={handleClickPasswordVisibility}\n              >\n                <svg>\n                  <use href={`${sprite}#icon-eye`} />\n                </svg>\n              </button>\n            )}\n          </div>\n          <ErrorMessage name=\"password\">\n            {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n          </ErrorMessage>\n\n          <button className={css.button} type=\"submit\">\n            Log In Now\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\n// *Додати іконку і логіку на видимість пароля\n","import { NavLink, useParams } from 'react-router-dom';\nimport css from './Auth.module.css';\nimport { Register } from './Register';\nimport { Login } from './Login';\n\nexport const AuthNav = () => {\n  const { id } = useParams();\n\n  return (\n    <div className={css.authForm}>\n      <div className={css.authNav}>\n        <NavLink className={css.authLink1} to=\"/auth/register\">\n          Registration\n        </NavLink>\n        <NavLink className={css.authLink2} to=\"/auth/login\">\n          Log In\n        </NavLink>\n        {id === 'register' ? <Register /> : <Login />}\n      </div>\n    </div>\n  );\n};\n","import { AuthNav } from 'components/Auth/AuthNav';\nimport css from '../../components/Auth/Auth.module.css';\n\nconst AuthPage = () => {\n  return (\n    <div className={css.authPageWrapper}>\n      <AuthNav />\n    </div>\n  );\n};\n\n\nexport default AuthPage\n\n"],"names":["schema","Yup","shape","name","matches","required","email","password","Register","passwordVisible","setPasswordVisible","useState","handleClickPasswordVisibility","_jsx","className","css","children","Formik","initialValues","validationSchema","_jsxs","Form","Field","type","placeholder","ErrorMessage","errorMsg","onClick","href","concat","sprite","Login","autoComplete","AuthNav","id","useParams","NavLink","to","AuthPage"],"sourceRoot":""}