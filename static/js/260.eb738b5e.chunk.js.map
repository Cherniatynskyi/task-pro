{"version":3,"file":"static/js/260.eb738b5e.chunk.js","mappings":"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","sources":["webpack://task-pro/./src/components/Auth/Auth.module.css?93a7","components/Auth/Register.jsx","components/Auth/Login.jsx","components/Auth/AuthNav.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authPageWrapper\":\"Auth_authPageWrapper__QiGyE\",\"authForm\":\"Auth_authForm__-Et2v\",\"registerForm\":\"Auth_registerForm__FTXoS\",\"loginForm\":\"Auth_loginForm__LVUAX\",\"authNav\":\"Auth_authNav__kGdXJ\",\"authLink1\":\"Auth_authLink1__G6iFP\",\"authLink2\":\"Auth_authLink2__ZGHwE\",\"linkActive\":\"Auth_linkActive__EmJKO\",\"fieldWrapper\":\"Auth_fieldWrapper__B6Zfo\",\"field\":\"Auth_field__w1nrX\",\"field_password\":\"Auth_field_password__Mk5Yq\",\"notError\":\"Auth_notError__XqP9N\",\"button\":\"Auth_button__oOib1\",\"iconBtn\":\"Auth_iconBtn__QA+XP\",\"passwordWrapper\":\"Auth_passwordWrapper__PlJo7\",\"errorMessage\":\"Auth_errorMessage__-2mWy\"};","import React from 'react';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport css from './Auth.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registerThunk } from '../../redux/auth/authThunks';\nimport sprite from '../../images/sprite.svg';\n\nconst emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name must be at least 6 characters')\n    .max(32, 'Name must be no more than 16 characters')\n    .required('Name is required*'),\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .matches(/^(?=.*[a-z])/, 'Password must meet the requirements*')\n    .min(8, 'Password must be at least 6 characters')\n    .max(64, 'Password must be no more than 16 characters')\n    .required('Password is required*'),\n});\n\nexport const Register = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector(state => state.auth.token)\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleSubmit = e => {\n    const {name, email, password} = e\n    \n    dispatch(registerThunk({name,email,password}));\n    console.log(isAuth)\n    \n    // e.reset();\n  };\n\n  return (\n    <div className={css.registerForm}>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n        onSubmit={(e)=>handleSubmit(e)}\n      >\n        {({ errors, touched }) => (\n          <Form>\n            <div className={css.fieldWrapper}>\n              <Field\n                className={css.field}\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter your name\"\n              />\n            </div>\n            {errors.name && touched.name ? (\n              <ErrorMessage name=\"name\">\n                {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n              </ErrorMessage>\n            ) : (\n              <div className={css.notError}></div>\n            )}\n            <div className={css.fieldWrapper}>\n              <Field\n                className={css.field}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            {errors.email && touched.email ? (\n              <ErrorMessage name=\"email\">\n                {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n              </ErrorMessage>\n            ) : (\n              <div className={css.notError}></div>\n            )}\n\n            <div className={`${css.fieldWrapper} ${css.passwordWrapper}`}>\n              <Field\n                className={css.field}\n                id={css.field_password}\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Create a password\"\n              />\n              {passwordVisible ? (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              ) : (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              )}\n            </div>\n            {errors.password && touched.password ? (\n              <ErrorMessage name=\"password\">\n                {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n              </ErrorMessage>\n            ) : (\n              <div className={css.notError}></div>\n            )}\n\n            <button className={css.button} type=\"submit\">\n              Register Now\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\n// * підключити зміну теми\n","import React from 'react';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport css from './Auth.module.css';\nimport sprite from '../../images/sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport { loginThunk } from '../../redux/auth/authThunks';\n\nconst emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .matches(/^(?=.*[a-z])/, 'Password must meet the requirements*')\n    .min(8, 'Password must be at least 6 characters')\n    .max(64, 'Password must be no more than 16 characters')\n    .required('Password is required*'),\n});\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleSubmit = e => {\n    const {email, password}=e\n    dispatch(loginThunk({email, password}));\n    // form.reset();\n  };\n\n  return (\n    <div className={css.loginForm}>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n      >\n        {({ errors, touched }) => (\n          <Form onSubmit={handleSubmit} autoComplete=\"off\">\n            <div className={css.fieldWrapper}>\n              <Field\n                className={css.field}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            {errors.email && touched.email ? (\n              <ErrorMessage name=\"email\">\n                {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n              </ErrorMessage>\n            ) : (\n              <div className={css.notError}></div>\n            )}\n\n            <div className={`${css.fieldWrapper} ${css.passwordWrapper}`}>\n              <Field\n                className={css.field}\n                id={css.field_password}\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Confirm a password\"\n              />\n              {passwordVisible ? (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              ) : (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              )}\n            </div>\n            {errors.password && touched.password ? (\n              <ErrorMessage name=\"password\">\n                {errorMsg => <div className={css.errorMessage}>{errorMsg}</div>}\n              </ErrorMessage>\n            ) : (\n              <div className={css.notError}></div>\n            )}\n\n            <button className={css.button} type=\"submit\">\n              Log In Now\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import { NavLink, useParams } from 'react-router-dom';\nimport css from './Auth.module.css';\nimport { Register } from './Register';\nimport { Login } from './Login';\n\nexport const AuthNav = () => {\n  const { id } = useParams();\n\n  return (\n    <div className={css.authForm}>\n      <div className={css.authNav}>\n        <NavLink\n          className={`${css.authLink1} ${\n            id === 'register' ? css.linkActive : ''\n          }`}\n          to=\"/auth/register\"\n        >\n          Registration\n        </NavLink>\n        <NavLink\n          className={`${css.authLink2} ${id === 'login' ? css.linkActive : ''}`}\n          to=\"/auth/login\"\n        >\n          Log In\n        </NavLink>\n        {id === 'register' ? <Register /> : <Login />}\n      </div>\n    </div>\n  );\n};\n","import { AuthNav } from 'components/Auth/AuthNav';\nimport css from '../../components/Auth/Auth.module.css';\n\nconst AuthPage = () => {\n  return (\n    <div className={css.authPageWrapper}>\n      <AuthNav />\n    </div>\n  );\n};\n\n\nexport default AuthPage\n\n"],"names":["schema","Yup","shape","name","min","max","required","email","matches","password","Register","dispatch","useDispatch","isAuth","useSelector","state","auth","token","passwordVisible","setPasswordVisible","useState","handleClickPasswordVisibility","_jsx","className","css","children","Formik","initialValues","validationSchema","onSubmit","e","registerThunk","console","log","handleSubmit","_ref","errors","touched","_jsxs","Form","Field","type","placeholder","ErrorMessage","errorMsg","concat","id","onClick","href","sprite","Login","loginThunk","autoComplete","AuthNav","useParams","NavLink","to","AuthPage"],"sourceRoot":""}