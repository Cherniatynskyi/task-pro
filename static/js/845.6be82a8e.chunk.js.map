{"version":3,"file":"static/js/845.6be82a8e.chunk.js","mappings":"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","sources":["components/Auth/Register.jsx","components/Auth/Login.jsx","components/Auth/AuthNav.jsx","pages/AuthPage/AuthPage.jsx","webpack://task-pro/./src/components/Auth/Auth.module.css?93a7"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport css from './Auth.module.css';\n// import { useDispatch } from 'react-redux';\n// import { register } from 'redux/auth/operations';\n\nconst nameRegExp =\n  /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{2,32}$/;\n\nconst emailRegExp =\n  /^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$/;\n// /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\nconst passwordRegExp =\n  /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,64}$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(nameRegExp, 'Enter a valid name*')\n    .required('Name is required*'),\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .required('Password is required*')\n    .matches(passwordRegExp, 'Password must meet the requirements*'),\n});\n\nexport const Register = () => {\n  // const dispatch = useDispatch();\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n  //   dispatch(\n  //     register({\n  //       name: form.elements.name.value,\n  //       email: form.elements.email.value,\n  //       password: form.elements.password.value,\n  //     })\n  //   );\n  //   form.reset();\n  // };\n\n  return (\n    <div className={css.registerForm}>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n        // onSubmit={handleSubmit}\n      >\n        <Form>\n          <ErrorMessage name=\"name\" component=\"div\" />\n          <Field\n            className={css.field}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter your name\"\n          />\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <Field\n            className={css.field}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n          />\n          <ErrorMessage name=\"password\" component=\"div\" />\n          <Field\n            className={css.field}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Create a password\"\n          />\n\n          <button className={css.button} type=\"submit\">\n            Register Now\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\n// * Підправити стилі на виведення помилки\n// * звірити валідації\n// * підключити зміну теми\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport css from './Auth.module.css';\n\n// import { useDispatch } from 'react-redux';\n// import { logIn } from 'redux/auth/operations';\n\nexport const Login = () => {\n  // const dispatch = useDispatch();\n\n  //   const handleSubmit = e => {\n  //     e.preventDefault();\n  //     const form = e.currentTarget;\n  //     dispatch(\n  //       logIn({\n  //         email: form.elements.email.value,\n  //         password: form.elements.password.value,\n  //       })\n  //     );\n  //     form.reset();\n  return (\n    <div className={css.loginForm}>\n      <Formik>\n        {/* <Form onSubmit={handleSubmit} autoComplete=\"off\">*/}\n        <Form autoComplete=\"off\">\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <Field\n            className={css.field}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n          />\n          <ErrorMessage name=\"password\" component=\"div\" />\n          <Field\n            className={css.field}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Confirm a password\"\n          />\n\n          <button className={css.button} type=\"submit\">\n            Log In Now\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\n// *Додати іконку і логіку на видимість пароля\n","import { NavLink, useParams } from 'react-router-dom';\nimport css from './Auth.module.css';\nimport { Register } from './Register';\nimport { Login } from './Login';\n\nexport const AuthNav = () => {\n  const { id } = useParams();\n\n  return (\n    <div className={css.authForm}>\n      <div className={css.authNav}>\n        <NavLink className={css.authLink1} to=\"/auth/register\">\n          Registration\n        </NavLink>\n        <NavLink className={css.authLink2} to=\"/auth/login\">\n          Log In\n        </NavLink>\n        {id === 'register' ? <Register /> : <Login />}\n      </div>\n    </div>\n  );\n};\n","import { AuthNav } from 'components/Auth/AuthNav';\nimport css from '../../components/Auth/Auth.module.css';\n\nconst AuthPage = () => {\n  return (\n    <div className={css.authPageWrapper}>\n      <AuthNav />\n    </div>\n  );\n};\n\n\nexport default AuthPage\n\n","// extracted by mini-css-extract-plugin\nexport default {\"authPageWrapper\":\"Auth_authPageWrapper__QiGyE\",\"authForm\":\"Auth_authForm__-Et2v\",\"registerForm\":\"Auth_registerForm__FTXoS\",\"loginForm\":\"Auth_loginForm__LVUAX\",\"authNav\":\"Auth_authNav__kGdXJ\",\"authLink1\":\"Auth_authLink1__G6iFP\",\"authLink2\":\"Auth_authLink2__ZGHwE\",\"field\":\"Auth_field__w1nrX\",\"button\":\"Auth_button__oOib1\"};"],"names":["schema","Yup","shape","name","matches","required","email","password","Register","_jsx","className","css","registerForm","children","Formik","initialValues","validationSchema","_jsxs","Form","ErrorMessage","component","Field","field","type","placeholder","button","Login","loginForm","autoComplete","AuthNav","id","useParams","authForm","authNav","NavLink","authLink1","to","authLink2","AuthPage","authPageWrapper"],"sourceRoot":""}